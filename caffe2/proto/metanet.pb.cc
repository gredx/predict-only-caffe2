// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metanet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metanet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* ModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobsMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobsMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetsMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetsMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlansMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlansMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaNetDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaNetDef_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_metanet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_metanet_2eproto() {
  protobuf_AddDesc_metanet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metanet.proto");
  GOOGLE_CHECK(file != NULL);
  ModelInfo_descriptor_ = file->message_type(0);
  static const int ModelInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, modelclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, predictortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, modelid_),
  };
  ModelInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelInfo_descriptor_,
      ModelInfo::default_instance_,
      ModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, _internal_metadata_),
      -1);
  BlobsMap_descriptor_ = file->message_type(1);
  static const int BlobsMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, value_),
  };
  BlobsMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobsMap_descriptor_,
      BlobsMap::default_instance_,
      BlobsMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlobsMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, _internal_metadata_),
      -1);
  NetsMap_descriptor_ = file->message_type(2);
  static const int NetsMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, value_),
  };
  NetsMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetsMap_descriptor_,
      NetsMap::default_instance_,
      NetsMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetsMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, _internal_metadata_),
      -1);
  PlansMap_descriptor_ = file->message_type(3);
  static const int PlansMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, value_),
  };
  PlansMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlansMap_descriptor_,
      PlansMap::default_instance_,
      PlansMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlansMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, _internal_metadata_),
      -1);
  StringMap_descriptor_ = file->message_type(4);
  static const int StringMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, value_),
  };
  StringMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringMap_descriptor_,
      StringMap::default_instance_,
      StringMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, _internal_metadata_),
      -1);
  MetaNetDef_descriptor_ = file->message_type(5);
  static const int MetaNetDef_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, nets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, modelinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, plans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, applicationspecificinfo_),
  };
  MetaNetDef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetaNetDef_descriptor_,
      MetaNetDef::default_instance_,
      MetaNetDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, _has_bits_[0]),
      -1,
      -1,
      sizeof(MetaNetDef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metanet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelInfo_descriptor_, &ModelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobsMap_descriptor_, &BlobsMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetsMap_descriptor_, &NetsMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlansMap_descriptor_, &PlansMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringMap_descriptor_, &StringMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetaNetDef_descriptor_, &MetaNetDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metanet_2eproto() {
  delete ModelInfo::default_instance_;
  delete ModelInfo_reflection_;
  delete ModelInfo::_default_predictortype_;
  delete BlobsMap::default_instance_;
  delete BlobsMap_reflection_;
  delete NetsMap::default_instance_;
  delete NetsMap_reflection_;
  delete PlansMap::default_instance_;
  delete PlansMap_reflection_;
  delete StringMap::default_instance_;
  delete StringMap_reflection_;
  delete MetaNetDef::default_instance_;
  delete MetaNetDef_reflection_;
}

void protobuf_AddDesc_metanet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_metanet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::caffe2::protobuf_AddDesc_caffe2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmetanet.proto\022\006caffe2\032\014caffe2.proto\"{\n"
    "\tModelInfo\022\017\n\007project\030\001 \001(\t\022\022\n\nmodelClas"
    "s\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\'\n\rpredictorTyp"
    "e\030\004 \001(\t:\020SINGLE_PREDICTOR\022\017\n\007modelId\030\005 \001"
    "(\t\"&\n\010BlobsMap\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \003"
    "(\t\"5\n\007NetsMap\022\013\n\003key\030\001 \002(\t\022\035\n\005value\030\002 \002("
    "\0132\016.caffe2.NetDef\"7\n\010PlansMap\022\013\n\003key\030\001 \002"
    "(\t\022\036\n\005value\030\002 \002(\0132\017.caffe2.PlanDef\"\'\n\tSt"
    "ringMap\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\307\001\n\n"
    "MetaNetDef\022\037\n\005blobs\030\001 \003(\0132\020.caffe2.Blobs"
    "Map\022\035\n\004nets\030\002 \003(\0132\017.caffe2.NetsMap\022$\n\tmo"
    "delInfo\030\003 \001(\0132\021.caffe2.ModelInfo\022\037\n\005plan"
    "s\030\004 \003(\0132\020.caffe2.PlansMap\0222\n\027application"
    "SpecificInfo\030\005 \003(\0132\021.caffe2.StringMap", 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metanet.proto", &protobuf_RegisterTypes);
  ModelInfo::_default_predictortype_ =
      new ::std::string("SINGLE_PREDICTOR", 16);
  ModelInfo::default_instance_ = new ModelInfo();
  BlobsMap::default_instance_ = new BlobsMap();
  NetsMap::default_instance_ = new NetsMap();
  PlansMap::default_instance_ = new PlansMap();
  StringMap::default_instance_ = new StringMap();
  MetaNetDef::default_instance_ = new MetaNetDef();
  ModelInfo::default_instance_->InitAsDefaultInstance();
  BlobsMap::default_instance_->InitAsDefaultInstance();
  NetsMap::default_instance_->InitAsDefaultInstance();
  PlansMap::default_instance_->InitAsDefaultInstance();
  StringMap::default_instance_->InitAsDefaultInstance();
  MetaNetDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metanet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metanet_2eproto {
  StaticDescriptorInitializer_metanet_2eproto() {
    protobuf_AddDesc_metanet_2eproto();
  }
} static_descriptor_initializer_metanet_2eproto_;

// ===================================================================

::std::string* ModelInfo::_default_predictortype_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelInfo::kProjectFieldNumber;
const int ModelInfo::kModelClassFieldNumber;
const int ModelInfo::kVersionFieldNumber;
const int ModelInfo::kPredictorTypeFieldNumber;
const int ModelInfo::kModelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelInfo::ModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ModelInfo)
}

void ModelInfo::InitAsDefaultInstance() {
}

ModelInfo::ModelInfo(const ModelInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.ModelInfo)
}

void ModelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predictortype_.UnsafeSetDefault(_default_predictortype_);
  modelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelInfo::~ModelInfo() {
  // @@protoc_insertion_point(destructor:caffe2.ModelInfo)
  SharedDtor();
}

void ModelInfo::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predictortype_.DestroyNoArena(_default_predictortype_);
  modelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelInfo_descriptor_;
}

const ModelInfo& ModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

ModelInfo* ModelInfo::default_instance_ = NULL;

ModelInfo* ModelInfo::New(::google::protobuf::Arena* arena) const {
  ModelInfo* n = new ModelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ModelInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_project()) {
      project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_modelclass()) {
      modelclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_predictortype()) {
      predictortype_.ClearToDefaultNoArena(_default_predictortype_);
    }
    if (has_modelid()) {
      modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ModelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->project().data(), this->project().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ModelInfo.project");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modelClass;
        break;
      }

      // optional string modelClass = 2;
      case 2: {
        if (tag == 18) {
         parse_modelClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelclass().data(), this->modelclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ModelInfo.modelClass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ModelInfo.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_predictorType;
        break;
      }

      // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
      case 4: {
        if (tag == 34) {
         parse_predictorType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predictortype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predictortype().data(), this->predictortype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ModelInfo.predictorType");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_modelId;
        break;
      }

      // optional string modelId = 5;
      case 5: {
        if (tag == 42) {
         parse_modelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelid().data(), this->modelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ModelInfo.modelId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ModelInfo)
  return false;
#undef DO_
}

void ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ModelInfo)
  // optional string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // optional string modelClass = 2;
  if (has_modelclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelclass().data(), this->modelclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.modelClass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modelclass(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
  if (has_predictortype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictortype().data(), this->predictortype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.predictorType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->predictortype(), output);
  }

  // optional string modelId = 5;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.modelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modelid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ModelInfo)
}

::google::protobuf::uint8* ModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ModelInfo)
  // optional string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // optional string modelClass = 2;
  if (has_modelclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelclass().data(), this->modelclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.modelClass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modelclass(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
  if (has_predictortype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictortype().data(), this->predictortype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.predictorType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->predictortype(), target);
  }

  // optional string modelId = 5;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ModelInfo.modelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modelid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ModelInfo)
  return target;
}

int ModelInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ModelInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string project = 1;
    if (has_project()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project());
    }

    // optional string modelClass = 2;
    if (has_modelclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelclass());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
    if (has_predictortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predictortype());
    }

    // optional string modelId = 5;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ModelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ModelInfo)
    MergeFrom(*source);
  }
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ModelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_project()) {
      set_has_project();
      project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
    }
    if (from.has_modelclass()) {
      set_has_modelclass();
      modelclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelclass_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_predictortype()) {
      set_has_predictortype();
      predictortype_.AssignWithDefault(_default_predictortype_, from.predictortype_);
    }
    if (from.has_modelid()) {
      set_has_modelid();
      modelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {

  return true;
}

void ModelInfo::Swap(ModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelInfo::InternalSwap(ModelInfo* other) {
  project_.Swap(&other->project_);
  modelclass_.Swap(&other->modelclass_);
  version_.Swap(&other->version_);
  predictortype_.Swap(&other->predictortype_);
  modelid_.Swap(&other->modelid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelInfo_descriptor_;
  metadata.reflection = ModelInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelInfo

// optional string project = 1;
bool ModelInfo::has_project() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelInfo::set_has_project() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelInfo::clear_has_project() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelInfo::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_project();
}
 const ::std::string& ModelInfo::project() const {
  // @@protoc_insertion_point(field_get:caffe2.ModelInfo.project)
  return project_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_project(const ::std::string& value) {
  set_has_project();
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ModelInfo.project)
}
 void ModelInfo::set_project(const char* value) {
  set_has_project();
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ModelInfo.project)
}
 void ModelInfo::set_project(const char* value, size_t size) {
  set_has_project();
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ModelInfo.project)
}
 ::std::string* ModelInfo::mutable_project() {
  set_has_project();
  // @@protoc_insertion_point(field_mutable:caffe2.ModelInfo.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelInfo::release_project() {
  // @@protoc_insertion_point(field_release:caffe2.ModelInfo.project)
  clear_has_project();
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    set_has_project();
  } else {
    clear_has_project();
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ModelInfo.project)
}

// optional string modelClass = 2;
bool ModelInfo::has_modelclass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelInfo::set_has_modelclass() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelInfo::clear_has_modelclass() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelInfo::clear_modelclass() {
  modelclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modelclass();
}
 const ::std::string& ModelInfo::modelclass() const {
  // @@protoc_insertion_point(field_get:caffe2.ModelInfo.modelClass)
  return modelclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_modelclass(const ::std::string& value) {
  set_has_modelclass();
  modelclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ModelInfo.modelClass)
}
 void ModelInfo::set_modelclass(const char* value) {
  set_has_modelclass();
  modelclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ModelInfo.modelClass)
}
 void ModelInfo::set_modelclass(const char* value, size_t size) {
  set_has_modelclass();
  modelclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ModelInfo.modelClass)
}
 ::std::string* ModelInfo::mutable_modelclass() {
  set_has_modelclass();
  // @@protoc_insertion_point(field_mutable:caffe2.ModelInfo.modelClass)
  return modelclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelInfo::release_modelclass() {
  // @@protoc_insertion_point(field_release:caffe2.ModelInfo.modelClass)
  clear_has_modelclass();
  return modelclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_allocated_modelclass(::std::string* modelclass) {
  if (modelclass != NULL) {
    set_has_modelclass();
  } else {
    clear_has_modelclass();
  }
  modelclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelclass);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ModelInfo.modelClass)
}

// optional string version = 3;
bool ModelInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ModelInfo::version() const {
  // @@protoc_insertion_point(field_get:caffe2.ModelInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ModelInfo.version)
}
 void ModelInfo::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ModelInfo.version)
}
 void ModelInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ModelInfo.version)
}
 ::std::string* ModelInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:caffe2.ModelInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelInfo::release_version() {
  // @@protoc_insertion_point(field_release:caffe2.ModelInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ModelInfo.version)
}

// optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
bool ModelInfo::has_predictortype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelInfo::set_has_predictortype() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelInfo::clear_has_predictortype() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelInfo::clear_predictortype() {
  predictortype_.ClearToDefaultNoArena(_default_predictortype_);
  clear_has_predictortype();
}
 const ::std::string& ModelInfo::predictortype() const {
  // @@protoc_insertion_point(field_get:caffe2.ModelInfo.predictorType)
  return predictortype_.GetNoArena(_default_predictortype_);
}
 void ModelInfo::set_predictortype(const ::std::string& value) {
  set_has_predictortype();
  predictortype_.SetNoArena(_default_predictortype_, value);
  // @@protoc_insertion_point(field_set:caffe2.ModelInfo.predictorType)
}
 void ModelInfo::set_predictortype(const char* value) {
  set_has_predictortype();
  predictortype_.SetNoArena(_default_predictortype_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ModelInfo.predictorType)
}
 void ModelInfo::set_predictortype(const char* value, size_t size) {
  set_has_predictortype();
  predictortype_.SetNoArena(_default_predictortype_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ModelInfo.predictorType)
}
 ::std::string* ModelInfo::mutable_predictortype() {
  set_has_predictortype();
  // @@protoc_insertion_point(field_mutable:caffe2.ModelInfo.predictorType)
  return predictortype_.MutableNoArena(_default_predictortype_);
}
 ::std::string* ModelInfo::release_predictortype() {
  // @@protoc_insertion_point(field_release:caffe2.ModelInfo.predictorType)
  clear_has_predictortype();
  return predictortype_.ReleaseNoArena(_default_predictortype_);
}
 void ModelInfo::set_allocated_predictortype(::std::string* predictortype) {
  if (predictortype != NULL) {
    set_has_predictortype();
  } else {
    clear_has_predictortype();
  }
  predictortype_.SetAllocatedNoArena(_default_predictortype_, predictortype);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ModelInfo.predictorType)
}

// optional string modelId = 5;
bool ModelInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelInfo::clear_modelid() {
  modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modelid();
}
 const ::std::string& ModelInfo::modelid() const {
  // @@protoc_insertion_point(field_get:caffe2.ModelInfo.modelId)
  return modelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_modelid(const ::std::string& value) {
  set_has_modelid();
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ModelInfo.modelId)
}
 void ModelInfo::set_modelid(const char* value) {
  set_has_modelid();
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ModelInfo.modelId)
}
 void ModelInfo::set_modelid(const char* value, size_t size) {
  set_has_modelid();
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ModelInfo.modelId)
}
 ::std::string* ModelInfo::mutable_modelid() {
  set_has_modelid();
  // @@protoc_insertion_point(field_mutable:caffe2.ModelInfo.modelId)
  return modelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelInfo::release_modelid() {
  // @@protoc_insertion_point(field_release:caffe2.ModelInfo.modelId)
  clear_has_modelid();
  return modelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelInfo::set_allocated_modelid(::std::string* modelid) {
  if (modelid != NULL) {
    set_has_modelid();
  } else {
    clear_has_modelid();
  }
  modelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelid);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ModelInfo.modelId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobsMap::kKeyFieldNumber;
const int BlobsMap::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobsMap::BlobsMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.BlobsMap)
}

void BlobsMap::InitAsDefaultInstance() {
}

BlobsMap::BlobsMap(const BlobsMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.BlobsMap)
}

void BlobsMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobsMap::~BlobsMap() {
  // @@protoc_insertion_point(destructor:caffe2.BlobsMap)
  SharedDtor();
}

void BlobsMap::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BlobsMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobsMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobsMap_descriptor_;
}

const BlobsMap& BlobsMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

BlobsMap* BlobsMap::default_instance_ = NULL;

BlobsMap* BlobsMap::New(::google::protobuf::Arena* arena) const {
  BlobsMap* n = new BlobsMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobsMap::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.BlobsMap)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobsMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.BlobsMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.BlobsMap.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.BlobsMap.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.BlobsMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.BlobsMap)
  return false;
#undef DO_
}

void BlobsMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.BlobsMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobsMap.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobsMap.value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.BlobsMap)
}

::google::protobuf::uint8* BlobsMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.BlobsMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobsMap.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobsMap.value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.BlobsMap)
  return target;
}

int BlobsMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.BlobsMap)
  int total_size = 0;

  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // repeated string value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobsMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.BlobsMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlobsMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobsMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.BlobsMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.BlobsMap)
    MergeFrom(*source);
  }
}

void BlobsMap::MergeFrom(const BlobsMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.BlobsMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlobsMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.BlobsMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobsMap::CopyFrom(const BlobsMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.BlobsMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobsMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlobsMap::Swap(BlobsMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobsMap::InternalSwap(BlobsMap* other) {
  key_.Swap(&other->key_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobsMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobsMap_descriptor_;
  metadata.reflection = BlobsMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobsMap

// required string key = 1;
bool BlobsMap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobsMap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobsMap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobsMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& BlobsMap::key() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobsMap.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlobsMap::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobsMap.key)
}
 void BlobsMap::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobsMap.key)
}
 void BlobsMap::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobsMap.key)
}
 ::std::string* BlobsMap::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobsMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlobsMap::release_key() {
  // @@protoc_insertion_point(field_release:caffe2.BlobsMap.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlobsMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobsMap.key)
}

// repeated string value = 2;
int BlobsMap::value_size() const {
  return value_.size();
}
void BlobsMap::clear_value() {
  value_.Clear();
}
 const ::std::string& BlobsMap::value(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.BlobsMap.value)
  return value_.Get(index);
}
 ::std::string* BlobsMap::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.BlobsMap.value)
  return value_.Mutable(index);
}
 void BlobsMap::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.BlobsMap.value)
  value_.Mutable(index)->assign(value);
}
 void BlobsMap::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.BlobsMap.value)
}
 void BlobsMap::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobsMap.value)
}
 ::std::string* BlobsMap::add_value() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.BlobsMap.value)
  return value_.Add();
}
 void BlobsMap::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.BlobsMap.value)
}
 void BlobsMap::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.BlobsMap.value)
}
 void BlobsMap::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.BlobsMap.value)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlobsMap::value() const {
  // @@protoc_insertion_point(field_list:caffe2.BlobsMap.value)
  return value_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BlobsMap::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.BlobsMap.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetsMap::kKeyFieldNumber;
const int NetsMap::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetsMap::NetsMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.NetsMap)
}

void NetsMap::InitAsDefaultInstance() {
  value_ = const_cast< ::caffe2::NetDef*>(&::caffe2::NetDef::default_instance());
}

NetsMap::NetsMap(const NetsMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.NetsMap)
}

void NetsMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetsMap::~NetsMap() {
  // @@protoc_insertion_point(destructor:caffe2.NetsMap)
  SharedDtor();
}

void NetsMap::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void NetsMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetsMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetsMap_descriptor_;
}

const NetsMap& NetsMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

NetsMap* NetsMap::default_instance_ = NULL;

NetsMap* NetsMap::New(::google::protobuf::Arena* arena) const {
  NetsMap* n = new NetsMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetsMap::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.NetsMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      if (value_ != NULL) value_->::caffe2::NetDef::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetsMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.NetsMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NetsMap.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .caffe2.NetDef value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.NetsMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.NetsMap)
  return false;
#undef DO_
}

void NetsMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.NetsMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetsMap.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .caffe2.NetDef value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.NetsMap)
}

::google::protobuf::uint8* NetsMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.NetsMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetsMap.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .caffe2.NetDef value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.NetsMap)
  return target;
}

int NetsMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.NetsMap)
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required .caffe2.NetDef value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  return total_size;
}
int NetsMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.NetsMap)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required .caffe2.NetDef value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetsMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.NetsMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NetsMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetsMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.NetsMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.NetsMap)
    MergeFrom(*source);
  }
}

void NetsMap::MergeFrom(const NetsMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.NetsMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::caffe2::NetDef::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetsMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.NetsMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetsMap::CopyFrom(const NetsMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.NetsMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetsMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NetsMap::Swap(NetsMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetsMap::InternalSwap(NetsMap* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetsMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetsMap_descriptor_;
  metadata.reflection = NetsMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetsMap

// required string key = 1;
bool NetsMap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetsMap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void NetsMap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetsMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& NetsMap::key() const {
  // @@protoc_insertion_point(field_get:caffe2.NetsMap.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetsMap::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.NetsMap.key)
}
 void NetsMap::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.NetsMap.key)
}
 void NetsMap::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetsMap.key)
}
 ::std::string* NetsMap::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:caffe2.NetsMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetsMap::release_key() {
  // @@protoc_insertion_point(field_release:caffe2.NetsMap.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetsMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetsMap.key)
}

// required .caffe2.NetDef value = 2;
bool NetsMap::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetsMap::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void NetsMap::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetsMap::clear_value() {
  if (value_ != NULL) value_->::caffe2::NetDef::Clear();
  clear_has_value();
}
const ::caffe2::NetDef& NetsMap::value() const {
  // @@protoc_insertion_point(field_get:caffe2.NetsMap.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::caffe2::NetDef* NetsMap::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::caffe2::NetDef;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.NetsMap.value)
  return value_;
}
::caffe2::NetDef* NetsMap::release_value() {
  // @@protoc_insertion_point(field_release:caffe2.NetsMap.value)
  clear_has_value();
  ::caffe2::NetDef* temp = value_;
  value_ = NULL;
  return temp;
}
void NetsMap::set_allocated_value(::caffe2::NetDef* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetsMap.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlansMap::kKeyFieldNumber;
const int PlansMap::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlansMap::PlansMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PlansMap)
}

void PlansMap::InitAsDefaultInstance() {
  value_ = const_cast< ::caffe2::PlanDef*>(&::caffe2::PlanDef::default_instance());
}

PlansMap::PlansMap(const PlansMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.PlansMap)
}

void PlansMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlansMap::~PlansMap() {
  // @@protoc_insertion_point(destructor:caffe2.PlansMap)
  SharedDtor();
}

void PlansMap::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void PlansMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlansMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlansMap_descriptor_;
}

const PlansMap& PlansMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

PlansMap* PlansMap::default_instance_ = NULL;

PlansMap* PlansMap::New(::google::protobuf::Arena* arena) const {
  PlansMap* n = new PlansMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlansMap::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PlansMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      if (value_ != NULL) value_->::caffe2::PlanDef::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlansMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PlansMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PlansMap.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .caffe2.PlanDef value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PlansMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PlansMap)
  return false;
#undef DO_
}

void PlansMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PlansMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PlansMap.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .caffe2.PlanDef value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PlansMap)
}

::google::protobuf::uint8* PlansMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PlansMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PlansMap.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .caffe2.PlanDef value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PlansMap)
  return target;
}

int PlansMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.PlansMap)
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required .caffe2.PlanDef value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  return total_size;
}
int PlansMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PlansMap)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required .caffe2.PlanDef value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlansMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PlansMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlansMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlansMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PlansMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PlansMap)
    MergeFrom(*source);
  }
}

void PlansMap::MergeFrom(const PlansMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PlansMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::caffe2::PlanDef::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlansMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PlansMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlansMap::CopyFrom(const PlansMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PlansMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlansMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlansMap::Swap(PlansMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlansMap::InternalSwap(PlansMap* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlansMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlansMap_descriptor_;
  metadata.reflection = PlansMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlansMap

// required string key = 1;
bool PlansMap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlansMap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PlansMap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlansMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& PlansMap::key() const {
  // @@protoc_insertion_point(field_get:caffe2.PlansMap.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlansMap::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.PlansMap.key)
}
 void PlansMap::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PlansMap.key)
}
 void PlansMap::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PlansMap.key)
}
 ::std::string* PlansMap::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:caffe2.PlansMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlansMap::release_key() {
  // @@protoc_insertion_point(field_release:caffe2.PlansMap.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlansMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PlansMap.key)
}

// required .caffe2.PlanDef value = 2;
bool PlansMap::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlansMap::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PlansMap::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlansMap::clear_value() {
  if (value_ != NULL) value_->::caffe2::PlanDef::Clear();
  clear_has_value();
}
const ::caffe2::PlanDef& PlansMap::value() const {
  // @@protoc_insertion_point(field_get:caffe2.PlansMap.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::caffe2::PlanDef* PlansMap::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::caffe2::PlanDef;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PlansMap.value)
  return value_;
}
::caffe2::PlanDef* PlansMap::release_value() {
  // @@protoc_insertion_point(field_release:caffe2.PlansMap.value)
  clear_has_value();
  ::caffe2::PlanDef* temp = value_;
  value_ = NULL;
  return temp;
}
void PlansMap::set_allocated_value(::caffe2::PlanDef* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PlansMap.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringMap::kKeyFieldNumber;
const int StringMap::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringMap::StringMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.StringMap)
}

void StringMap::InitAsDefaultInstance() {
}

StringMap::StringMap(const StringMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.StringMap)
}

void StringMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringMap::~StringMap() {
  // @@protoc_insertion_point(destructor:caffe2.StringMap)
  SharedDtor();
}

void StringMap::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringMap_descriptor_;
}

const StringMap& StringMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

StringMap* StringMap::default_instance_ = NULL;

StringMap* StringMap::New(::google::protobuf::Arena* arena) const {
  StringMap* n = new StringMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringMap::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.StringMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.StringMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.StringMap.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.StringMap.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.StringMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.StringMap)
  return false;
#undef DO_
}

void StringMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.StringMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.StringMap.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.StringMap.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.StringMap)
}

::google::protobuf::uint8* StringMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.StringMap)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.StringMap.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.StringMap.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.StringMap)
  return target;
}

int StringMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.StringMap)
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int StringMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.StringMap)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.StringMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StringMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.StringMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.StringMap)
    MergeFrom(*source);
  }
}

void StringMap::MergeFrom(const StringMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.StringMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.StringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMap::CopyFrom(const StringMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.StringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringMap::Swap(StringMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringMap::InternalSwap(StringMap* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringMap_descriptor_;
  metadata.reflection = StringMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringMap

// required string key = 1;
bool StringMap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StringMap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void StringMap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void StringMap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& StringMap::key() const {
  // @@protoc_insertion_point(field_get:caffe2.StringMap.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringMap::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.StringMap.key)
}
 void StringMap::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.StringMap.key)
}
 void StringMap::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.StringMap.key)
}
 ::std::string* StringMap::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:caffe2.StringMap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringMap::release_key() {
  // @@protoc_insertion_point(field_release:caffe2.StringMap.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringMap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:caffe2.StringMap.key)
}

// required string value = 2;
bool StringMap::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StringMap::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void StringMap::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void StringMap::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& StringMap::value() const {
  // @@protoc_insertion_point(field_get:caffe2.StringMap.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringMap::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.StringMap.value)
}
 void StringMap::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.StringMap.value)
}
 void StringMap::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.StringMap.value)
}
 ::std::string* StringMap::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:caffe2.StringMap.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringMap::release_value() {
  // @@protoc_insertion_point(field_release:caffe2.StringMap.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringMap::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:caffe2.StringMap.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaNetDef::kBlobsFieldNumber;
const int MetaNetDef::kNetsFieldNumber;
const int MetaNetDef::kModelInfoFieldNumber;
const int MetaNetDef::kPlansFieldNumber;
const int MetaNetDef::kApplicationSpecificInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaNetDef::MetaNetDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.MetaNetDef)
}

void MetaNetDef::InitAsDefaultInstance() {
  modelinfo_ = const_cast< ::caffe2::ModelInfo*>(&::caffe2::ModelInfo::default_instance());
}

MetaNetDef::MetaNetDef(const MetaNetDef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.MetaNetDef)
}

void MetaNetDef::SharedCtor() {
  _cached_size_ = 0;
  modelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaNetDef::~MetaNetDef() {
  // @@protoc_insertion_point(destructor:caffe2.MetaNetDef)
  SharedDtor();
}

void MetaNetDef::SharedDtor() {
  if (this != default_instance_) {
    delete modelinfo_;
  }
}

void MetaNetDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaNetDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaNetDef_descriptor_;
}

const MetaNetDef& MetaNetDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

MetaNetDef* MetaNetDef::default_instance_ = NULL;

MetaNetDef* MetaNetDef::New(::google::protobuf::Arena* arena) const {
  MetaNetDef* n = new MetaNetDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaNetDef::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.MetaNetDef)
  if (has_modelinfo()) {
    if (modelinfo_ != NULL) modelinfo_->::caffe2::ModelInfo::Clear();
  }
  blobs_.Clear();
  nets_.Clear();
  plans_.Clear();
  applicationspecificinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MetaNetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.MetaNetDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.BlobsMap blobs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_blobs;
        if (input->ExpectTag(18)) goto parse_loop_nets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe2.NetsMap nets = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_nets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_modelInfo;
        break;
      }

      // optional .caffe2.ModelInfo modelInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_modelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_plans;
        break;
      }

      // repeated .caffe2.PlansMap plans = 4;
      case 4: {
        if (tag == 34) {
         parse_plans:
          DO_(input->IncrementRecursionDepth());
         parse_loop_plans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_plans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_plans;
        if (input->ExpectTag(42)) goto parse_loop_applicationSpecificInfo;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe2.StringMap applicationSpecificInfo = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_applicationSpecificInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_applicationspecificinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_applicationSpecificInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.MetaNetDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.MetaNetDef)
  return false;
#undef DO_
}

void MetaNetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.MetaNetDef)
  // repeated .caffe2.BlobsMap blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }

  // repeated .caffe2.NetsMap nets = 2;
  for (unsigned int i = 0, n = this->nets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nets(i), output);
  }

  // optional .caffe2.ModelInfo modelInfo = 3;
  if (has_modelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->modelinfo_, output);
  }

  // repeated .caffe2.PlansMap plans = 4;
  for (unsigned int i = 0, n = this->plans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->plans(i), output);
  }

  // repeated .caffe2.StringMap applicationSpecificInfo = 5;
  for (unsigned int i = 0, n = this->applicationspecificinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applicationspecificinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.MetaNetDef)
}

::google::protobuf::uint8* MetaNetDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.MetaNetDef)
  // repeated .caffe2.BlobsMap blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->blobs(i), false, target);
  }

  // repeated .caffe2.NetsMap nets = 2;
  for (unsigned int i = 0, n = this->nets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nets(i), false, target);
  }

  // optional .caffe2.ModelInfo modelInfo = 3;
  if (has_modelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->modelinfo_, false, target);
  }

  // repeated .caffe2.PlansMap plans = 4;
  for (unsigned int i = 0, n = this->plans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->plans(i), false, target);
  }

  // repeated .caffe2.StringMap applicationSpecificInfo = 5;
  for (unsigned int i = 0, n = this->applicationspecificinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->applicationspecificinfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.MetaNetDef)
  return target;
}

int MetaNetDef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.MetaNetDef)
  int total_size = 0;

  // optional .caffe2.ModelInfo modelInfo = 3;
  if (has_modelinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->modelinfo_);
  }

  // repeated .caffe2.BlobsMap blobs = 1;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated .caffe2.NetsMap nets = 2;
  total_size += 1 * this->nets_size();
  for (int i = 0; i < this->nets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nets(i));
  }

  // repeated .caffe2.PlansMap plans = 4;
  total_size += 1 * this->plans_size();
  for (int i = 0; i < this->plans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plans(i));
  }

  // repeated .caffe2.StringMap applicationSpecificInfo = 5;
  total_size += 1 * this->applicationspecificinfo_size();
  for (int i = 0; i < this->applicationspecificinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applicationspecificinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaNetDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.MetaNetDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MetaNetDef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaNetDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.MetaNetDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.MetaNetDef)
    MergeFrom(*source);
  }
}

void MetaNetDef::MergeFrom(const MetaNetDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.MetaNetDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  blobs_.MergeFrom(from.blobs_);
  nets_.MergeFrom(from.nets_);
  plans_.MergeFrom(from.plans_);
  applicationspecificinfo_.MergeFrom(from.applicationspecificinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_modelinfo()) {
      mutable_modelinfo()->::caffe2::ModelInfo::MergeFrom(from.modelinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MetaNetDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.MetaNetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaNetDef::CopyFrom(const MetaNetDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.MetaNetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaNetDef::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->blobs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->plans())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->applicationspecificinfo())) return false;
  return true;
}

void MetaNetDef::Swap(MetaNetDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaNetDef::InternalSwap(MetaNetDef* other) {
  blobs_.UnsafeArenaSwap(&other->blobs_);
  nets_.UnsafeArenaSwap(&other->nets_);
  std::swap(modelinfo_, other->modelinfo_);
  plans_.UnsafeArenaSwap(&other->plans_);
  applicationspecificinfo_.UnsafeArenaSwap(&other->applicationspecificinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaNetDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaNetDef_descriptor_;
  metadata.reflection = MetaNetDef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaNetDef

// repeated .caffe2.BlobsMap blobs = 1;
int MetaNetDef::blobs_size() const {
  return blobs_.size();
}
void MetaNetDef::clear_blobs() {
  blobs_.Clear();
}
const ::caffe2::BlobsMap& MetaNetDef::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.MetaNetDef.blobs)
  return blobs_.Get(index);
}
::caffe2::BlobsMap* MetaNetDef::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.MetaNetDef.blobs)
  return blobs_.Mutable(index);
}
::caffe2::BlobsMap* MetaNetDef::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe2.MetaNetDef.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::BlobsMap >*
MetaNetDef::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.MetaNetDef.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::BlobsMap >&
MetaNetDef::blobs() const {
  // @@protoc_insertion_point(field_list:caffe2.MetaNetDef.blobs)
  return blobs_;
}

// repeated .caffe2.NetsMap nets = 2;
int MetaNetDef::nets_size() const {
  return nets_.size();
}
void MetaNetDef::clear_nets() {
  nets_.Clear();
}
const ::caffe2::NetsMap& MetaNetDef::nets(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.MetaNetDef.nets)
  return nets_.Get(index);
}
::caffe2::NetsMap* MetaNetDef::mutable_nets(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.MetaNetDef.nets)
  return nets_.Mutable(index);
}
::caffe2::NetsMap* MetaNetDef::add_nets() {
  // @@protoc_insertion_point(field_add:caffe2.MetaNetDef.nets)
  return nets_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::NetsMap >*
MetaNetDef::mutable_nets() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.MetaNetDef.nets)
  return &nets_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::NetsMap >&
MetaNetDef::nets() const {
  // @@protoc_insertion_point(field_list:caffe2.MetaNetDef.nets)
  return nets_;
}

// optional .caffe2.ModelInfo modelInfo = 3;
bool MetaNetDef::has_modelinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MetaNetDef::set_has_modelinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void MetaNetDef::clear_has_modelinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void MetaNetDef::clear_modelinfo() {
  if (modelinfo_ != NULL) modelinfo_->::caffe2::ModelInfo::Clear();
  clear_has_modelinfo();
}
const ::caffe2::ModelInfo& MetaNetDef::modelinfo() const {
  // @@protoc_insertion_point(field_get:caffe2.MetaNetDef.modelInfo)
  return modelinfo_ != NULL ? *modelinfo_ : *default_instance_->modelinfo_;
}
::caffe2::ModelInfo* MetaNetDef::mutable_modelinfo() {
  set_has_modelinfo();
  if (modelinfo_ == NULL) {
    modelinfo_ = new ::caffe2::ModelInfo;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.MetaNetDef.modelInfo)
  return modelinfo_;
}
::caffe2::ModelInfo* MetaNetDef::release_modelinfo() {
  // @@protoc_insertion_point(field_release:caffe2.MetaNetDef.modelInfo)
  clear_has_modelinfo();
  ::caffe2::ModelInfo* temp = modelinfo_;
  modelinfo_ = NULL;
  return temp;
}
void MetaNetDef::set_allocated_modelinfo(::caffe2::ModelInfo* modelinfo) {
  delete modelinfo_;
  modelinfo_ = modelinfo;
  if (modelinfo) {
    set_has_modelinfo();
  } else {
    clear_has_modelinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.MetaNetDef.modelInfo)
}

// repeated .caffe2.PlansMap plans = 4;
int MetaNetDef::plans_size() const {
  return plans_.size();
}
void MetaNetDef::clear_plans() {
  plans_.Clear();
}
const ::caffe2::PlansMap& MetaNetDef::plans(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.MetaNetDef.plans)
  return plans_.Get(index);
}
::caffe2::PlansMap* MetaNetDef::mutable_plans(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.MetaNetDef.plans)
  return plans_.Mutable(index);
}
::caffe2::PlansMap* MetaNetDef::add_plans() {
  // @@protoc_insertion_point(field_add:caffe2.MetaNetDef.plans)
  return plans_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::PlansMap >*
MetaNetDef::mutable_plans() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.MetaNetDef.plans)
  return &plans_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::PlansMap >&
MetaNetDef::plans() const {
  // @@protoc_insertion_point(field_list:caffe2.MetaNetDef.plans)
  return plans_;
}

// repeated .caffe2.StringMap applicationSpecificInfo = 5;
int MetaNetDef::applicationspecificinfo_size() const {
  return applicationspecificinfo_.size();
}
void MetaNetDef::clear_applicationspecificinfo() {
  applicationspecificinfo_.Clear();
}
const ::caffe2::StringMap& MetaNetDef::applicationspecificinfo(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.MetaNetDef.applicationSpecificInfo)
  return applicationspecificinfo_.Get(index);
}
::caffe2::StringMap* MetaNetDef::mutable_applicationspecificinfo(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.MetaNetDef.applicationSpecificInfo)
  return applicationspecificinfo_.Mutable(index);
}
::caffe2::StringMap* MetaNetDef::add_applicationspecificinfo() {
  // @@protoc_insertion_point(field_add:caffe2.MetaNetDef.applicationSpecificInfo)
  return applicationspecificinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::StringMap >*
MetaNetDef::mutable_applicationspecificinfo() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.MetaNetDef.applicationSpecificInfo)
  return &applicationspecificinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::StringMap >&
MetaNetDef::applicationspecificinfo() const {
  // @@protoc_insertion_point(field_list:caffe2.MetaNetDef.applicationSpecificInfo)
  return applicationspecificinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

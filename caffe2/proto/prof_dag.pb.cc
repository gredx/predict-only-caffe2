// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prof_dag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prof_dag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* TwoNumberStatsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TwoNumberStatsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfDAGProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfDAGProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfDAGProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfDAGProtos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prof_5fdag_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prof_5fdag_2eproto() {
  protobuf_AddDesc_prof_5fdag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prof_dag.proto");
  GOOGLE_CHECK(file != NULL);
  TwoNumberStatsProto_descriptor_ = file->message_type(0);
  static const int TwoNumberStatsProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoNumberStatsProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoNumberStatsProto, stddev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoNumberStatsProto, count_),
  };
  TwoNumberStatsProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TwoNumberStatsProto_descriptor_,
      TwoNumberStatsProto::default_instance_,
      TwoNumberStatsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoNumberStatsProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(TwoNumberStatsProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoNumberStatsProto, _internal_metadata_),
      -1);
  BlobProfile_descriptor_ = file->message_type(1);
  static const int BlobProfile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfile, bytes_used_),
  };
  BlobProfile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobProfile_descriptor_,
      BlobProfile::default_instance_,
      BlobProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfile, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlobProfile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfile, _internal_metadata_),
      -1);
  ProfDAGProto_descriptor_ = file->message_type(2);
  static const int ProfDAGProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, stddev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, execution_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, output_profile_),
  };
  ProfDAGProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProfDAGProto_descriptor_,
      ProfDAGProto::default_instance_,
      ProfDAGProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProfDAGProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, _internal_metadata_),
      -1);
  ProfDAGProtos_descriptor_ = file->message_type(3);
  static const int ProfDAGProtos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, net_name_),
  };
  ProfDAGProtos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProfDAGProtos_descriptor_,
      ProfDAGProtos::default_instance_,
      ProfDAGProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProfDAGProtos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prof_5fdag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TwoNumberStatsProto_descriptor_, &TwoNumberStatsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobProfile_descriptor_, &BlobProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProfDAGProto_descriptor_, &ProfDAGProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProfDAGProtos_descriptor_, &ProfDAGProtos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prof_5fdag_2eproto() {
  delete TwoNumberStatsProto::default_instance_;
  delete TwoNumberStatsProto_reflection_;
  delete BlobProfile::default_instance_;
  delete BlobProfile_reflection_;
  delete ProfDAGProto::default_instance_;
  delete ProfDAGProto_reflection_;
  delete ProfDAGProtos::default_instance_;
  delete ProfDAGProtos_reflection_;
}

void protobuf_AddDesc_prof_5fdag_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prof_5fdag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016prof_dag.proto\022\006caffe2\"B\n\023TwoNumberSta"
    "tsProto\022\014\n\004mean\030\001 \001(\002\022\016\n\006stddev\030\002 \001(\002\022\r\n"
    "\005count\030\003 \001(\003\"L\n\013BlobProfile\022\014\n\004name\030\001 \001("
    "\t\022/\n\nbytes_used\030\003 \001(\0132\033.caffe2.TwoNumber"
    "StatsProto\"\234\001\n\014ProfDAGProto\022\014\n\004name\030\001 \002("
    "\t\022\014\n\004mean\030\002 \002(\002\022\016\n\006stddev\030\003 \002(\002\0223\n\016execu"
    "tion_time\030\004 \001(\0132\033.caffe2.TwoNumberStatsP"
    "roto\022+\n\016output_profile\030\005 \003(\0132\023.caffe2.Bl"
    "obProfile\"F\n\rProfDAGProtos\022#\n\005stats\030\001 \003("
    "\0132\024.caffe2.ProfDAGProto\022\020\n\010net_name\030\002 \001("
    "\t", 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prof_dag.proto", &protobuf_RegisterTypes);
  TwoNumberStatsProto::default_instance_ = new TwoNumberStatsProto();
  BlobProfile::default_instance_ = new BlobProfile();
  ProfDAGProto::default_instance_ = new ProfDAGProto();
  ProfDAGProtos::default_instance_ = new ProfDAGProtos();
  TwoNumberStatsProto::default_instance_->InitAsDefaultInstance();
  BlobProfile::default_instance_->InitAsDefaultInstance();
  ProfDAGProto::default_instance_->InitAsDefaultInstance();
  ProfDAGProtos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prof_5fdag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prof_5fdag_2eproto {
  StaticDescriptorInitializer_prof_5fdag_2eproto() {
    protobuf_AddDesc_prof_5fdag_2eproto();
  }
} static_descriptor_initializer_prof_5fdag_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoNumberStatsProto::kMeanFieldNumber;
const int TwoNumberStatsProto::kStddevFieldNumber;
const int TwoNumberStatsProto::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoNumberStatsProto::TwoNumberStatsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TwoNumberStatsProto)
}

void TwoNumberStatsProto::InitAsDefaultInstance() {
}

TwoNumberStatsProto::TwoNumberStatsProto(const TwoNumberStatsProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.TwoNumberStatsProto)
}

void TwoNumberStatsProto::SharedCtor() {
  _cached_size_ = 0;
  mean_ = 0;
  stddev_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TwoNumberStatsProto::~TwoNumberStatsProto() {
  // @@protoc_insertion_point(destructor:caffe2.TwoNumberStatsProto)
  SharedDtor();
}

void TwoNumberStatsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TwoNumberStatsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwoNumberStatsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TwoNumberStatsProto_descriptor_;
}

const TwoNumberStatsProto& TwoNumberStatsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prof_5fdag_2eproto();
  return *default_instance_;
}

TwoNumberStatsProto* TwoNumberStatsProto::default_instance_ = NULL;

TwoNumberStatsProto* TwoNumberStatsProto::New(::google::protobuf::Arena* arena) const {
  TwoNumberStatsProto* n = new TwoNumberStatsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwoNumberStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TwoNumberStatsProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TwoNumberStatsProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TwoNumberStatsProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mean_, count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TwoNumberStatsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TwoNumberStatsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_stddev;
        break;
      }

      // optional float stddev = 2;
      case 2: {
        if (tag == 21) {
         parse_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
          set_has_stddev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int64 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TwoNumberStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TwoNumberStatsProto)
  return false;
#undef DO_
}

void TwoNumberStatsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TwoNumberStatsProto)
  // optional float mean = 1;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // optional float stddev = 2;
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->stddev(), output);
  }

  // optional int64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TwoNumberStatsProto)
}

::google::protobuf::uint8* TwoNumberStatsProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TwoNumberStatsProto)
  // optional float mean = 1;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // optional float stddev = 2;
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->stddev(), target);
  }

  // optional int64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TwoNumberStatsProto)
  return target;
}

int TwoNumberStatsProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TwoNumberStatsProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float mean = 1;
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float stddev = 2;
    if (has_stddev()) {
      total_size += 1 + 4;
    }

    // optional int64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwoNumberStatsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TwoNumberStatsProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TwoNumberStatsProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TwoNumberStatsProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TwoNumberStatsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TwoNumberStatsProto)
    MergeFrom(*source);
  }
}

void TwoNumberStatsProto::MergeFrom(const TwoNumberStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TwoNumberStatsProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TwoNumberStatsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TwoNumberStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoNumberStatsProto::CopyFrom(const TwoNumberStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TwoNumberStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoNumberStatsProto::IsInitialized() const {

  return true;
}

void TwoNumberStatsProto::Swap(TwoNumberStatsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoNumberStatsProto::InternalSwap(TwoNumberStatsProto* other) {
  std::swap(mean_, other->mean_);
  std::swap(stddev_, other->stddev_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwoNumberStatsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TwoNumberStatsProto_descriptor_;
  metadata.reflection = TwoNumberStatsProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwoNumberStatsProto

// optional float mean = 1;
bool TwoNumberStatsProto::has_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TwoNumberStatsProto::set_has_mean() {
  _has_bits_[0] |= 0x00000001u;
}
void TwoNumberStatsProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
void TwoNumberStatsProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
 float TwoNumberStatsProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.mean)
  return mean_;
}
 void TwoNumberStatsProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.mean)
}

// optional float stddev = 2;
bool TwoNumberStatsProto::has_stddev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TwoNumberStatsProto::set_has_stddev() {
  _has_bits_[0] |= 0x00000002u;
}
void TwoNumberStatsProto::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000002u;
}
void TwoNumberStatsProto::clear_stddev() {
  stddev_ = 0;
  clear_has_stddev();
}
 float TwoNumberStatsProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.stddev)
  return stddev_;
}
 void TwoNumberStatsProto::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.stddev)
}

// optional int64 count = 3;
bool TwoNumberStatsProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TwoNumberStatsProto::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void TwoNumberStatsProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void TwoNumberStatsProto::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
 ::google::protobuf::int64 TwoNumberStatsProto::count() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.count)
  return count_;
}
 void TwoNumberStatsProto::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProfile::kNameFieldNumber;
const int BlobProfile::kBytesUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProfile::BlobProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.BlobProfile)
}

void BlobProfile::InitAsDefaultInstance() {
  bytes_used_ = const_cast< ::caffe2::TwoNumberStatsProto*>(&::caffe2::TwoNumberStatsProto::default_instance());
}

BlobProfile::BlobProfile(const BlobProfile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.BlobProfile)
}

void BlobProfile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_used_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProfile::~BlobProfile() {
  // @@protoc_insertion_point(destructor:caffe2.BlobProfile)
  SharedDtor();
}

void BlobProfile::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bytes_used_;
  }
}

void BlobProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProfile_descriptor_;
}

const BlobProfile& BlobProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prof_5fdag_2eproto();
  return *default_instance_;
}

BlobProfile* BlobProfile::default_instance_ = NULL;

BlobProfile* BlobProfile::New(::google::protobuf::Arena* arena) const {
  BlobProfile* n = new BlobProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.BlobProfile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bytes_used()) {
      if (bytes_used_ != NULL) bytes_used_->::caffe2::TwoNumberStatsProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.BlobProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.BlobProfile.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bytes_used;
        break;
      }

      // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
      case 3: {
        if (tag == 26) {
         parse_bytes_used:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bytes_used()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.BlobProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.BlobProfile)
  return false;
#undef DO_
}

void BlobProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.BlobProfile)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProfile.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
  if (has_bytes_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bytes_used_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.BlobProfile)
}

::google::protobuf::uint8* BlobProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.BlobProfile)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProfile.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
  if (has_bytes_used()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bytes_used_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.BlobProfile)
  return target;
}

int BlobProfile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.BlobProfile)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
    if (has_bytes_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bytes_used_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.BlobProfile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlobProfile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.BlobProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.BlobProfile)
    MergeFrom(*source);
  }
}

void BlobProfile::MergeFrom(const BlobProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.BlobProfile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_bytes_used()) {
      mutable_bytes_used()->::caffe2::TwoNumberStatsProto::MergeFrom(from.bytes_used());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlobProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.BlobProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProfile::CopyFrom(const BlobProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.BlobProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProfile::IsInitialized() const {

  return true;
}

void BlobProfile::Swap(BlobProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProfile::InternalSwap(BlobProfile* other) {
  name_.Swap(&other->name_);
  std::swap(bytes_used_, other->bytes_used_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProfile_descriptor_;
  metadata.reflection = BlobProfile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProfile

// optional string name = 1;
bool BlobProfile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProfile::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProfile::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProfile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BlobProfile::name() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProfile.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlobProfile::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProfile.name)
}
 void BlobProfile::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProfile.name)
}
 void BlobProfile::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProfile.name)
}
 ::std::string* BlobProfile::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProfile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlobProfile::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProfile.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlobProfile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProfile.name)
}

// optional .caffe2.TwoNumberStatsProto bytes_used = 3;
bool BlobProfile::has_bytes_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobProfile::set_has_bytes_used() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobProfile::clear_has_bytes_used() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobProfile::clear_bytes_used() {
  if (bytes_used_ != NULL) bytes_used_->::caffe2::TwoNumberStatsProto::Clear();
  clear_has_bytes_used();
}
const ::caffe2::TwoNumberStatsProto& BlobProfile::bytes_used() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProfile.bytes_used)
  return bytes_used_ != NULL ? *bytes_used_ : *default_instance_->bytes_used_;
}
::caffe2::TwoNumberStatsProto* BlobProfile::mutable_bytes_used() {
  set_has_bytes_used();
  if (bytes_used_ == NULL) {
    bytes_used_ = new ::caffe2::TwoNumberStatsProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProfile.bytes_used)
  return bytes_used_;
}
::caffe2::TwoNumberStatsProto* BlobProfile::release_bytes_used() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProfile.bytes_used)
  clear_has_bytes_used();
  ::caffe2::TwoNumberStatsProto* temp = bytes_used_;
  bytes_used_ = NULL;
  return temp;
}
void BlobProfile::set_allocated_bytes_used(::caffe2::TwoNumberStatsProto* bytes_used) {
  delete bytes_used_;
  bytes_used_ = bytes_used;
  if (bytes_used) {
    set_has_bytes_used();
  } else {
    clear_has_bytes_used();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProfile.bytes_used)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProto::kNameFieldNumber;
const int ProfDAGProto::kMeanFieldNumber;
const int ProfDAGProto::kStddevFieldNumber;
const int ProfDAGProto::kExecutionTimeFieldNumber;
const int ProfDAGProto::kOutputProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProto::ProfDAGProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProto)
}

void ProfDAGProto::InitAsDefaultInstance() {
  execution_time_ = const_cast< ::caffe2::TwoNumberStatsProto*>(&::caffe2::TwoNumberStatsProto::default_instance());
}

ProfDAGProto::ProfDAGProto(const ProfDAGProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProto)
}

void ProfDAGProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_ = 0;
  stddev_ = 0;
  execution_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfDAGProto::~ProfDAGProto() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProto)
  SharedDtor();
}

void ProfDAGProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete execution_time_;
  }
}

void ProfDAGProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfDAGProto_descriptor_;
}

const ProfDAGProto& ProfDAGProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prof_5fdag_2eproto();
  return *default_instance_;
}

ProfDAGProto* ProfDAGProto::default_instance_ = NULL;

ProfDAGProto* ProfDAGProto::New(::google::protobuf::Arena* arena) const {
  ProfDAGProto* n = new ProfDAGProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfDAGProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProfDAGProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProfDAGProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(mean_, stddev_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_execution_time()) {
      if (execution_time_ != NULL) execution_time_->::caffe2::TwoNumberStatsProto::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  output_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProfDAGProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ProfDAGProto.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mean;
        break;
      }

      // required float mean = 2;
      case 2: {
        if (tag == 21) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_stddev;
        break;
      }

      // required float stddev = 3;
      case 3: {
        if (tag == 29) {
         parse_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
          set_has_stddev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_execution_time;
        break;
      }

      // optional .caffe2.TwoNumberStatsProto execution_time = 4;
      case 4: {
        if (tag == 34) {
         parse_execution_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_profile;
        break;
      }

      // repeated .caffe2.BlobProfile output_profile = 5;
      case 5: {
        if (tag == 42) {
         parse_output_profile:
          DO_(input->IncrementRecursionDepth());
         parse_loop_output_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_output_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_output_profile;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProto)
  return false;
#undef DO_
}

void ProfDAGProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float mean = 2;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // required float stddev = 3;
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev(), output);
  }

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  if (has_execution_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->execution_time_, output);
  }

  // repeated .caffe2.BlobProfile output_profile = 5;
  for (unsigned int i = 0, n = this->output_profile_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output_profile(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProto)
}

::google::protobuf::uint8* ProfDAGProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float mean = 2;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // required float stddev = 3;
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev(), target);
  }

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  if (has_execution_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->execution_time_, false, target);
  }

  // repeated .caffe2.BlobProfile output_profile = 5;
  for (unsigned int i = 0, n = this->output_profile_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->output_profile(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProto)
  return target;
}

int ProfDAGProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.ProfDAGProto)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_mean()) {
    // required float mean = 2;
    total_size += 1 + 4;
  }

  if (has_stddev()) {
    // required float stddev = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int ProfDAGProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required float mean = 2;
    total_size += 1 + 4;

    // required float stddev = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  if (has_execution_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_time_);
  }

  // repeated .caffe2.BlobProfile output_profile = 5;
  total_size += 1 * this->output_profile_size();
  for (int i = 0; i < this->output_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_profile(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProfDAGProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfDAGProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProto)
    MergeFrom(*source);
  }
}

void ProfDAGProto::MergeFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  output_profile_.MergeFrom(from.output_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
    if (from.has_execution_time()) {
      mutable_execution_time()->::caffe2::TwoNumberStatsProto::MergeFrom(from.execution_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProfDAGProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProto::CopyFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProfDAGProto::Swap(ProfDAGProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProto::InternalSwap(ProfDAGProto* other) {
  name_.Swap(&other->name_);
  std::swap(mean_, other->mean_);
  std::swap(stddev_, other->stddev_);
  std::swap(execution_time_, other->execution_time_);
  output_profile_.UnsafeArenaSwap(&other->output_profile_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfDAGProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfDAGProto_descriptor_;
  metadata.reflection = ProfDAGProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfDAGProto

// required string name = 1;
bool ProfDAGProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfDAGProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfDAGProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfDAGProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ProfDAGProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProfDAGProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.name)
}
 void ProfDAGProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProto.name)
}
 void ProfDAGProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProto.name)
}
 ::std::string* ProfDAGProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProfDAGProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProfDAGProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.name)
}

// required float mean = 2;
bool ProfDAGProto::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfDAGProto::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfDAGProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfDAGProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
 float ProfDAGProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.mean)
  return mean_;
}
 void ProfDAGProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.mean)
}

// required float stddev = 3;
bool ProfDAGProto::has_stddev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProfDAGProto::set_has_stddev() {
  _has_bits_[0] |= 0x00000004u;
}
void ProfDAGProto::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProfDAGProto::clear_stddev() {
  stddev_ = 0;
  clear_has_stddev();
}
 float ProfDAGProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.stddev)
  return stddev_;
}
 void ProfDAGProto::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.stddev)
}

// optional .caffe2.TwoNumberStatsProto execution_time = 4;
bool ProfDAGProto::has_execution_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProfDAGProto::set_has_execution_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ProfDAGProto::clear_has_execution_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProfDAGProto::clear_execution_time() {
  if (execution_time_ != NULL) execution_time_->::caffe2::TwoNumberStatsProto::Clear();
  clear_has_execution_time();
}
const ::caffe2::TwoNumberStatsProto& ProfDAGProto::execution_time() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.execution_time)
  return execution_time_ != NULL ? *execution_time_ : *default_instance_->execution_time_;
}
::caffe2::TwoNumberStatsProto* ProfDAGProto::mutable_execution_time() {
  set_has_execution_time();
  if (execution_time_ == NULL) {
    execution_time_ = new ::caffe2::TwoNumberStatsProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.execution_time)
  return execution_time_;
}
::caffe2::TwoNumberStatsProto* ProfDAGProto::release_execution_time() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.execution_time)
  clear_has_execution_time();
  ::caffe2::TwoNumberStatsProto* temp = execution_time_;
  execution_time_ = NULL;
  return temp;
}
void ProfDAGProto::set_allocated_execution_time(::caffe2::TwoNumberStatsProto* execution_time) {
  delete execution_time_;
  execution_time_ = execution_time;
  if (execution_time) {
    set_has_execution_time();
  } else {
    clear_has_execution_time();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.execution_time)
}

// repeated .caffe2.BlobProfile output_profile = 5;
int ProfDAGProto::output_profile_size() const {
  return output_profile_.size();
}
void ProfDAGProto::clear_output_profile() {
  output_profile_.Clear();
}
const ::caffe2::BlobProfile& ProfDAGProto::output_profile(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Get(index);
}
::caffe2::BlobProfile* ProfDAGProto::mutable_output_profile(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Mutable(index);
}
::caffe2::BlobProfile* ProfDAGProto::add_output_profile() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile >*
ProfDAGProto::mutable_output_profile() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProto.output_profile)
  return &output_profile_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile >&
ProfDAGProto::output_profile() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProto.output_profile)
  return output_profile_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProtos::kStatsFieldNumber;
const int ProfDAGProtos::kNetNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProtos::ProfDAGProtos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProtos)
}

void ProfDAGProtos::InitAsDefaultInstance() {
}

ProfDAGProtos::ProfDAGProtos(const ProfDAGProtos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProtos)
}

void ProfDAGProtos::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  net_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfDAGProtos::~ProfDAGProtos() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProtos)
  SharedDtor();
}

void ProfDAGProtos::SharedDtor() {
  net_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProfDAGProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfDAGProtos_descriptor_;
}

const ProfDAGProtos& ProfDAGProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prof_5fdag_2eproto();
  return *default_instance_;
}

ProfDAGProtos* ProfDAGProtos::default_instance_ = NULL;

ProfDAGProtos* ProfDAGProtos::New(::google::protobuf::Arena* arena) const {
  ProfDAGProtos* n = new ProfDAGProtos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfDAGProtos::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProtos)
  if (has_net_name()) {
    net_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProfDAGProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.ProfDAGProto stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_net_name;
        break;
      }

      // optional string net_name = 2;
      case 2: {
        if (tag == 18) {
         parse_net_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_name().data(), this->net_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ProfDAGProtos.net_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProtos)
  return false;
#undef DO_
}

void ProfDAGProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProtos)
  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(i), output);
  }

  // optional string net_name = 2;
  if (has_net_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_name().data(), this->net_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProtos.net_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProtos)
}

::google::protobuf::uint8* ProfDAGProtos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProtos)
  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stats(i), false, target);
  }

  // optional string net_name = 2;
  if (has_net_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_name().data(), this->net_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProtos.net_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProtos)
  return target;
}

int ProfDAGProtos::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProtos)
  int total_size = 0;

  // optional string net_name = 2;
  if (has_net_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net_name());
  }

  // repeated .caffe2.ProfDAGProto stats = 1;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProtos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProtos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProfDAGProtos* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfDAGProtos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProtos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProtos)
    MergeFrom(*source);
  }
}

void ProfDAGProtos::MergeFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProtos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_net_name()) {
      set_has_net_name();
      net_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProfDAGProtos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProtos::CopyFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProtos::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->stats())) return false;
  return true;
}

void ProfDAGProtos::Swap(ProfDAGProtos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProtos::InternalSwap(ProfDAGProtos* other) {
  stats_.UnsafeArenaSwap(&other->stats_);
  net_name_.Swap(&other->net_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfDAGProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfDAGProtos_descriptor_;
  metadata.reflection = ProfDAGProtos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfDAGProtos

// repeated .caffe2.ProfDAGProto stats = 1;
int ProfDAGProtos::stats_size() const {
  return stats_.size();
}
void ProfDAGProtos::clear_stats() {
  stats_.Clear();
}
const ::caffe2::ProfDAGProto& ProfDAGProtos::stats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.stats)
  return stats_.Get(index);
}
::caffe2::ProfDAGProto* ProfDAGProtos::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.stats)
  return stats_.Mutable(index);
}
::caffe2::ProfDAGProto* ProfDAGProtos::add_stats() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProtos.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >*
ProfDAGProtos::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProtos.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >&
ProfDAGProtos::stats() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProtos.stats)
  return stats_;
}

// optional string net_name = 2;
bool ProfDAGProtos::has_net_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfDAGProtos::set_has_net_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfDAGProtos::clear_has_net_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfDAGProtos::clear_net_name() {
  net_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_name();
}
 const ::std::string& ProfDAGProtos::net_name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.net_name)
  return net_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProfDAGProtos::set_net_name(const ::std::string& value) {
  set_has_net_name();
  net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProtos.net_name)
}
 void ProfDAGProtos::set_net_name(const char* value) {
  set_has_net_name();
  net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProtos.net_name)
}
 void ProfDAGProtos::set_net_name(const char* value, size_t size) {
  set_has_net_name();
  net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProtos.net_name)
}
 ::std::string* ProfDAGProtos::mutable_net_name() {
  set_has_net_name();
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.net_name)
  return net_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProfDAGProtos::release_net_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProtos.net_name)
  clear_has_net_name();
  return net_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProfDAGProtos::set_allocated_net_name(::std::string* net_name) {
  if (net_name != NULL) {
    set_has_net_name();
  } else {
    clear_has_net_name();
  }
  net_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProtos.net_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
